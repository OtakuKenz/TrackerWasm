@page "/comic/add"
@page "/comic/edit/{ComicId}"
@using Microsoft.AspNetCore.Authorization
@using TrackerWasm.Components.ComicComponents
@using TrackerWasm.Components.SharedComponents
@using TrackerWasm.Models.ComicModels
@using TrackerWasm.Services
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject ToastService ToastService
@inject ComicService ComicService

@attribute [Authorize]

<PageTitle>@(ComicId == null ? "Add Comic" : "Edit Comic")</PageTitle>

<h1>@(ComicId == null ? "Add Comic" : "Edit Comic")</h1>

<EditForm Model="@_comic" OnValidSubmit="HandleValidSubmit" FormName="webtoon-form">
    <DataAnnotationsValidator/>

    <div class="vstack gap-3">
        <div class="form-group">
            <DisplayLabel For="@(() => _comic.Title)"/>
            <InputText id="Title" autocomplete="off" @bind-Value="_comic.Title" class="form-control"/>
            <ValidationMessage For="@(() => _comic.Title)"/>
        </div>

        <ComicTypeDropdown @bind-Value="_comic.ComicType" DataLoaded="@(b => _isComicTypeLoaded = b)"/>

        <PublishingStatusDropdown @bind-Value="_comic.PublishingStatus"
                                  DataLoaded="@(b => _isPublishingStatusLoaded = b)"/>

        <ReadStatusDropdown @bind-Value="_comic.ReadStatus" DataLoaded="@(b => _isReadStatusLoaded = b)"/>

        <div class="form-group">
            <DisplayLabel For="@(() => _comic.ChapterRead)"/>
            <InputNumber id="ChapterRead" autocomplete="off" @bind-Value="_comic.ChapterRead" class="form-control"/>
            <ValidationMessage For="@(() => _comic.ChapterRead)"/>
        </div>

        <div class="form-group">
            <DisplayLabel For="@(() => _comic.TotalChapter)"/>
            <InputNumber id="TotalChapter" autocomplete="off" @bind-Value="_comic.TotalChapter" class="form-control"/>
            <ValidationMessage For="@(() => _comic.TotalChapter)"/>
        </div>

        <div class="mt-3 hstack gap-3">
            @if (ComicId != null)
            {
                <Button Color="ButtonColor.Danger" @onclick="ShowConfirmationAsync">Delete</Button>
                <div class="vr ms-auto"></div>
            }
            else
            {
                <div class="ms-auto"></div>
            }
            <Button Color="ButtonColor.Secondary" @onclick="NavigateBack">Back</Button>

            @* ReSharper disable once Html.AttributeValueNotResolved *@
            @if (!(_isComicTypeLoaded && _isPublishingStatusLoaded && _isReadStatusLoaded))
            {
                <Button Color="ButtonColor.Primary" Loading="true"></Button>
            }
            else
            {
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save</Button>
            }
        </div>
    </div>
</EditForm>

<ConfirmDialog @ref="_deleteDialog"/>

@code {

    [Parameter] public string? ComicId { get; set; }
    private string _originalTitle = string.Empty;
    private Comic _comic = new();
    private ConfirmDialog _deleteDialog = default!;

    private bool _isComicTypeLoaded;
    private bool _isPublishingStatusLoaded;
    private bool _isReadStatusLoaded;

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        if (ComicId != null)
        {
            try
            {
                _comic = await ComicService.GetComic(ComicId);
                _originalTitle = _comic.Title;
            }
            catch (HttpRequestException)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Failed to retrieve Comic detail."));
                NavigationManager.NavigateTo("/comic/home");
            }
        }

        PreloadService.Hide();
    }

    private async Task HandleValidSubmit()
    {
        var isSuccess = false;
        var isDuplicate = false;
        PreloadService.Show(loadingText: "Saving comic...");
        if ((ComicId != null) & (_originalTitle != _comic.Title) || ComicId == null)
        {
            if (await ComicService.IsComicTitleDuplicate(_comic.Title))
            {
                isDuplicate = true;
            }
        }

        if (!isDuplicate)
        {
            if (ComicId == null)
            {
                var result = await ComicService.SaveComic(_comic);
                isSuccess = result.IsSuccessStatusCode;
            }
            else
            {
                var result = await ComicService.UpdateComic(_comic, ComicId);
                isSuccess = result.IsSuccessStatusCode;
            }
        }

        PreloadService.Hide();
        if (isSuccess)
        {
            ToastService.Notify(new ToastMessage(ToastType.Success,
                $"Record {(ComicId == null ? "added" : "updated")}."));
            NavigationManager.NavigateTo("comic/home");
        }
        else if (isDuplicate)
        {
            ToastService.Notify(new ToastMessage(ToastType.Warning,
                $"Failed to {(ComicId == null ? "add" : "update")}. An entry with the same title already exist."));
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Warning,
                $"Failed to {(ComicId == null ? "add" : "update")}. Unexpected error occured. Please try again."));
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(" /comic/home");
    }

    private async Task ShowConfirmationAsync()
    {
        var confirmation = await _deleteDialog.ShowAsync(
            "Are you sure you want to delete this?",
            $"Title: {_comic.Title}"
        );
        if (confirmation)
        {
            PreloadService.Show(SpinnerColor.Light, "Deleting...");
            var result = await ComicService.DeleteComic(_comic.Id);
            PreloadService.Hide();
            if (result.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage(ToastType.Success, "Record deleted."));
                NavigationManager.NavigateTo("/comic/home");
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Failed to delete."));
            }
        }
    }

}
