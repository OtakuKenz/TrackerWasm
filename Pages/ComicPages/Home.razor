@page "/comic/home"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using TrackerWasm.Components.ComicComponents
@using TrackerWasm.Components.SharedComponents
@using TrackerWasm.Models.ComicModels
@using TrackerWasm.Services
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject ComicService ComicService

@attribute [Authorize]

<PageTitle>Webtoons & Manga</PageTitle>

<h1>Webtoons & Manga</h1>

<Button Color="ButtonColor.Primary" @onclick="Add">Add</Button>
<Button Color="ButtonColor.Primary" @onclick="ToggleFilterAsync">Filter Setting</Button>
<Button Color="ButtonColor.Primary" @onclick="ToggleContentAsync">Column Setting</Button>

<Collapse @ref="_columnSetting">
    <Card class="mt-2">
        <CardBody>
            <CardTitle>Display Columns:</CardTitle>
            <CardBody>
                <EditForm Model="@_newValue" FormName="columnSetting" OnValidSubmit="ApplySetting">
                    <DataAnnotationsValidator/>
                    <div class="vstack gap-3">
                        <SwitchInput For="()=>_newValue.ReadStatus" @bind-Value="@_newValue.ReadStatus"></SwitchInput>
                        <SwitchInput For="()=>_newValue.Type" @bind-Value="@_newValue.Type"></SwitchInput>
                        <SwitchInput For="()=>_newValue.PublishingStatus"
                                     @bind-Value="@_newValue.PublishingStatus"></SwitchInput>
                        <div class="form-group">
                            <DisplayLabel For="@(() => _newValue.PageSize)"></DisplayLabel>
                            <NumberInput TValue="int" @bind-Value="@_newValue.PageSize" Placeholder="Items per page"/>
                            <ValidationMessage For="@(() => _newValue.PageSize)"/>
                        </div>
                        <Button Color="ButtonColor.Primary" Class="mt-2" Type="ButtonType.Submit">Apply</Button>
                    </div>
                </EditForm>
            </CardBody>
        </CardBody>
    </Card>
</Collapse>

<Collapse @ref="_filterSetting">
    <Card class="mt-2">
        <CardBody>
            <CardTitle>Filter Setting:</CardTitle>
            <CardBody>
                <div class="vstack gap-3">
                    <div class="form-group">
                        <label for="Title">Title</label>
                        <InputText id="Title" autocomplete="off" @bind-Value="_search.Title" class="form-control"/>
                    </div>

                    <ComicTypeDropdown @bind-Value="_search.ComicType"/>
                    <PublishingStatusDropdown @bind-Value="_search.PublishingStatus"/>
                    <ReadStatusDropdown @bind-Value="_search.ReadStatus"/>
                    <div class="hstack gap-3">
                        <Button Color="ButtonColor.Primary" @onclick="FilterTable">Filter</Button>
                        <Button Color="ButtonColor.Secondary" @onclick="ClearFilterForm">Clear</Button>
                    </div>
                </div>
            </CardBody>
        </CardBody>
    </Card>
</Collapse>


<Grid TItem="Comic" Class="table table-hover mt-2" DataProvider="EmployeesDataProvider" AllowPaging="true"
      PageSize="@_tableSetting.PageSize"
      @ref="_grid" Responsive="true">
    <GridColumns>
        <GridColumn TItem="Comic" HeaderText="Title" PropertyName="Title" FilterButtonCSSClass="d-none"
                    FilterOperator="FilterOperator.Contains" Filter>
            @context.Title
        </GridColumn>
        <GridColumn TItem="Comic" HeaderText="Read Status"
                    Class="@(_tableSetting.ReadStatus ? "text-end w-auto" : "d-none")"
                    PropertyName="Value">
            @context.ReadStatus
        </GridColumn>
        <GridColumn TItem="Comic" HeaderText="Type" Class="@(_tableSetting.Type ? "text-end w-auto" : "d-none")">
            @context.ComicType
        </GridColumn>
        <GridColumn TItem="Comic" HeaderText="Read" Filterable="false" Class="text-end w-auto">
            @(context.ChapterRead.HasValue ? context.ChapterRead.ToString() : "?")/@(context.TotalChapter.HasValue ? context.TotalChapter.ToString() : "?")
        </GridColumn>
        <GridColumn TItem="Comic" HeaderText="Publishing Status"
                    Class="@(_tableSetting.PublishingStatus ? "text-end w-auto" : "d-none")">
            @context.PublishingStatus
        </GridColumn>
        <GridColumn TItem="Comic" Filterable="false" Class="text-end w-auto">
            <Button Color="ButtonColor.Link" @onclick="() => Edit(context.Id)">Edit</Button>
        </GridColumn>
    </GridColumns>
</Grid>

@code {
    private List<Comic> _comics = [];

    private bool _gridDataLoaded;

    private TableSetting _tableSetting = new();
    private TableSetting _newValue = new();

    private Collapse _columnSetting = default!;

    private Collapse _filterSetting = default!;

    private Grid<Comic> _grid = default!;
    private List<Comic> data = [];

    private Comic _search = new();

    private class TableSetting
    {
        [Display(Name = "Read status")] public bool ReadStatus { get; set; }
        [Display(Name = "Type")] public bool Type { get; set; }
        [Display(Name = "Publishing status")] public bool PublishingStatus { get; set; }

        [Display(Name = "Page size")]
        [Range(5, int.MaxValue, ErrorMessage = "Page size should be minimum of 5")]
        public int PageSize { get; set; } = 5;
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/comic/add");
    }

    private void Edit(string id)
    {
        NavigationManager.NavigateTo($"/comic/edit/{id}");
    }

    string _readStatusDisplayed = "";

    private async Task<GridDataProviderResult<Comic>> EmployeesDataProvider(GridDataProviderRequest<Comic> request)
    {
        PreloadService.Show();
        if (!_gridDataLoaded)
        {
            data = await ComicService.GetComicList(_search);
            _gridDataLoaded = true;
        }

        PreloadService.Hide();
        return await Task.FromResult(request.ApplyTo(data));
    }

    private async Task ApplySetting()
    {
        _readStatusDisplayed = _newValue.ReadStatus ? "" : "d-none";
        _tableSetting = new TableSetting
        {
            ReadStatus = _newValue.ReadStatus,
            Type = _newValue.Type,
            PublishingStatus = _newValue.PublishingStatus,
            PageSize = _newValue.PageSize
        };
        Console.WriteLine($"Read status old value: {_tableSetting.ReadStatus}");
        Console.WriteLine($"Read status new value: {_newValue.ReadStatus}");
        PreloadService.Show(SpinnerColor.Light, "Updating Table...");
        await Task.Delay(200);
        StateHasChanged();
        await _columnSetting.ToggleAsync();
        PreloadService.Hide();
    }

    private async Task ToggleContentAsync()
    {
        _newValue = new TableSetting
        {
            ReadStatus = _tableSetting.ReadStatus,
            Type = _tableSetting.Type,
            PublishingStatus = _tableSetting.PublishingStatus,
            PageSize = _newValue.PageSize
        };
        await _columnSetting.ToggleAsync();
    }

    private async Task ToggleFilterAsync()
    {
        await _filterSetting.ToggleAsync();
    }

    private async Task FilterTable()
    {
        PreloadService.Show(SpinnerColor.Light, "Filtering data...");
        _gridDataLoaded = false;
        await _grid.RefreshDataAsync();
        await _filterSetting.ToggleAsync();
        PreloadService.Hide();
    }

    private async Task ClearFilterForm()
    {
        _search = new Comic();
        await FilterTable();
    }

}
