@page "/comic/home"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using TrackerWasm.Components.ComicComponents
@using TrackerWasm.Components.SharedComponents
@using TrackerWasm.Models.ComicModels
@using TrackerWasm.Services
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject ComicService ComicService

@attribute [Authorize]

<PageTitle>Webtoons & Manga</PageTitle>

<h1>Webtoons & Manga</h1>


<div class="d-flex flex-wrap gap-2">

    <div>
        <Button Color="ButtonColor.Primary" @onclick="Add" TooltipTitle="Add">
            <Icon Name="IconName.PlusCircle" />
        </Button>
    </div>

    <div>
        <Button Color="ButtonColor.Primary" @onclick="ToggleFilterAsync" TooltipTitle="Filter columns">
            <Icon Name="IconName.Funnel" />
        </Button>
    </div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="ToggleContentAsync" TooltipTitle="Column setting">
            <Icon Name="IconName.Gear" />
        </Button>
    </div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="PickRandom" TooltipTitle="Pick random">
            <Icon Name="IconName.Shuffle" />
        </Button>
    </div>
</div>




<div class="d-flex flex-column mt-3" style="height: 75vh;">
    <Collapse @ref="_columnSetting">
        <Card class="mt-2">
            <CardBody>
                <CardTitle>Display Columns:</CardTitle>
                <CardBody>
                    <EditForm Model="@_newValue" FormName="columnSetting" OnValidSubmit="ApplySetting">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-3">
                            <SwitchInput For="()=>_newValue.ReadStatus" @bind-Value="@_newValue.ReadStatus">
                            </SwitchInput>
                            <SwitchInput For="()=>_newValue.Type" @bind-Value="@_newValue.Type"></SwitchInput>
                            <SwitchInput For="()=>_newValue.PublishingStatus" @bind-Value="@_newValue.PublishingStatus">
                            </SwitchInput>
                            <SwitchInput For="()=>_newValue.Read" @bind-Value="@_newValue.Read">
                            </SwitchInput>
                            <div class="hstack gap-3">
                                <Button Color="ButtonColor.Primary" @onclick="FilterTable"
                                    Type="ButtonType.Submit">Filter</Button>
                                <Button Color="ButtonColor.Secondary" @onclick="ResetSetting">Reset</Button>
                            </div>
                        </div>
                    </EditForm>
                </CardBody>
            </CardBody>
        </Card>
    </Collapse>

    <Collapse @ref="_filterSetting">
        <Card class="mt-2">
            <CardBody>
                <CardTitle>Filter Setting:</CardTitle>
                <CardBody>
                    <div class="vstack gap-3">
                        <div class="form-group">
                            <label for="Title">Title</label>
                            <InputText id="Title" autocomplete="off" @bind-Value="_search.Title" class="form-control" />
                        </div>

                        <ComicTypeDropdown @bind-Value="_search.ComicType" />
                        <PublishingStatusDropdown @bind-Value="_search.PublishingStatus" />
                        <ReadStatusDropdown @bind-Value="_search.ReadStatus" />
                        <div class="hstack gap-3">
                            <Button Color="ButtonColor.Primary" @onclick="FilterTable">Filter</Button>
                            <Button Color="ButtonColor.Secondary" @onclick="ClearFilterForm">Clear</Button>
                        </div>
                    </div>
                </CardBody>
            </CardBody>
        </Card>
    </Collapse>

    <div class="flex-grow-1 overflow-auto">
        <div class="">
            <table class="table table-hover">
                <thead class="sticky-top">
                    <tr>
                        <th scope="col" style="min-width: 10em;">Title</th>
                        @if (_tableSetting.ReadStatus)
                        {
                            <th scope="col" style="min-width: 7em; max-width:7em; width: 7em;">Read Status</th>
                        }
                        @if (_tableSetting.Type)
                        {
                            <th scope="col" style="min-width: 5em; max-width:5em; width: 5em;">Type</th>
                        }
                        @if (_tableSetting.Read)
                        {
                            <th scope="col" style="min-width: 10em; max-width: 10em; width: 10em;">Chapter Read</th>
                        }
                        @if (_tableSetting.PublishingStatus)
                        {
                            <th scope="col" style="min-width: 10em; max-width:10em; width: 10em;">Publishing Status</th>
                        }
                        <th scope="col" style="min-width: 42px; width:42px"></th>
                    </tr>
                </thead>
                @if (!_isDataLoaded)
                {
                    <PlaceholderDefault></PlaceholderDefault>
                }
                else
                {
                    <tbody>
                        @if (data.Count == 0)
                        {
                            <div>
                                <h3>No data found</h3>
                            </div>
                        }
                        else
                        {
                            <Virtualize Items="@data" Context="comic">
                                <tr>
                                    <td>@comic.Title</td>
                                    @if (_tableSetting.ReadStatus)
                                    {
                                        <td>@comic.ReadStatus</td>
                                    }
                                    @if (_tableSetting.Type)
                                    {
                                        <td>@comic.ComicType</td>
                                    }
                                    @if (_tableSetting.Read)
                                    {
                                        <td>
                                            <div> @(comic.ChapterRead.HasValue ? comic.ChapterRead.ToString() :
                                          "?")/@(comic.TotalChapter.HasValue ? comic.TotalChapter.ToString() : "?")</div>
                                        </td>
                                    }
                                    @if (_tableSetting.PublishingStatus)
                                    {
                                        <td>@comic.PublishingStatus</td>
                                    }
                                    <td>
                                        <Button @onclick="() => Edit(comic.Id)" TooltipTitle="Edit">
                                            <Icon Name="IconName.Pencil"></Icon>
                                        </Button>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>

@code {
    private List<Comic> _comics = [];

    private TableSetting _tableSetting = new();
    private TableSetting _newValue = new();

    private Collapse _columnSetting = default!;

    private Collapse _filterSetting = default!;

    private List<Comic> data = [];

    private Comic _search = new();

    private bool _isDataLoaded = false;

    private class TableSetting
    {
        [Display(Name = "Read status")] public bool ReadStatus { get; set; }
        [Display(Name = "Type")] public bool Type { get; set; }
        [Display(Name = "Publishing status")] public bool PublishingStatus { get; set; }
        [Display(Name = "Chapter Read")] public bool Read { get; set; }
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/comic/add");
    }

    private void Edit(string id)
    {
        NavigationManager.NavigateTo($"/comic/edit/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterTable();
    }

    private async Task ApplySetting()
    {
        _tableSetting = new TableSetting
            {
                ReadStatus = _newValue.ReadStatus,
                Type = _newValue.Type,
                PublishingStatus = _newValue.PublishingStatus,
                Read = _newValue.Read
            };
        PreloadService.Show(SpinnerColor.Light, "Updating Table...");
        await Task.Delay(200);
        StateHasChanged();
        await _columnSetting.ToggleAsync();
        PreloadService.Hide();
    }

    private async Task ResetSetting()
    {
        _newValue.ReadStatus = false;
        _newValue.PublishingStatus = false;
        _newValue.Read = false;
        _newValue.Type = false;
        await ApplySetting();
    }

    private async Task ToggleContentAsync()
    {
        _newValue = new TableSetting
            {
                ReadStatus = _tableSetting.ReadStatus,
                Type = _tableSetting.Type,
                PublishingStatus = _tableSetting.PublishingStatus,
                Read = _tableSetting.Read
            };
        await _columnSetting.ToggleAsync();
    }

    private async Task ToggleFilterAsync()
    {
        await _filterSetting.ToggleAsync();
    }

    private async Task FilterTable()
    {
        _isDataLoaded = false;
        StateHasChanged();
        PreloadService.Show();
        data = await ComicService.GetComicList(_search);
        _isDataLoaded = true;
        StateHasChanged();
        PreloadService.Hide();

    }

    private async Task ClearFilterForm()
    {
        _search = new Comic();
        await FilterTable();
        await ToggleFilterAsync();
    }

    private void PickRandom()
    {
        var random = new Random();
        var index = random.Next(0, data.Count);
        var comic = data[index];
        NavigationManager.NavigateTo($"/comic/edit/{comic.Id}");
    }

}
