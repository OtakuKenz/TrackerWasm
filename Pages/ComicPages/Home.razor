@page "/comic/home"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using TrackerWasm.Components.ComicComponents
@using TrackerWasm.Components.SharedComponents
@using TrackerWasm.Models.ComicModels
@using TrackerWasm.Services
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject ComicService ComicService

@attribute [Authorize]

<PageTitle>Webtoons & Manga</PageTitle>

<h1>Webtoons & Manga</h1>


<div class="d-flex flex-wrap gap-2">
    <div>
        <Button Color="ButtonColor.Primary" @onclick="Add">
            <Icon Name="IconName.PlusCircle" />
        </Button>
    </div>

    <div>
        <Button Color="ButtonColor.Primary" @onclick="ToggleFilterAsync">
            <Icon Name="IconName.Funnel" />
        </Button>
    </div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="ToggleContentAsync">
            <Icon Name="IconName.Gear" />
        </Button>
    </div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="PickRandom">
            <Icon Name="IconName.Shuffle" />
        </Button>
    </div>
</div>

<div class="d-flex flex-column mt-3" style="height: 75vh;">
    <div class="flex-grow-1 overflow-auto">
        <table class="table table-hover">
            <thead class="sticky-top">
                <tr>
                    <th scope="col" style="min-width: 10em;">Title</th>
                    @if (_tableSetting.ReadStatus)
                    {
                        <th scope="col" style="min-width: 7em; max-width:7em; width: 7em;">Read Status</th>
                    }
                    @if (_tableSetting.Type)
                    {
                        <th scope="col" style="min-width: 5em; max-width:5em; width: 5em;">Type</th>
                    }
                    @if (_tableSetting.Read)
                    {
                        <th scope="col" style="min-width: 10em; max-width: 10em; width: 10em;">Chapter Read</th>
                    }
                    @if (_tableSetting.PublishingStatus)
                    {
                        <th scope="col" style="min-width: 10em; max-width:10em; width: 10em;">Publishing Status</th>
                    }
                    <th scope="col" style="min-width: 42px; width:42px"></th>
                </tr>
            </thead>
            @if (!_isDataLoaded)
            {
                <PlaceholderDefault></PlaceholderDefault>
            }
            else
            {
                <tbody>
                    @if (data.Count == 0)
                    {
                        <div>
                            <h3>No data found</h3>
                        </div>
                    }
                    else
                    {
                        <Virtualize Items="@data" Context="comic">
                            <tr>
                                <td>@comic.Title</td>
                                @if (_tableSetting.ReadStatus)
                                {
                                    <td>@comic.ReadStatus</td>
                                }
                                @if (_tableSetting.Type)
                                {
                                    <td>@comic.ComicType</td>
                                }
                                @if (_tableSetting.Read)
                                {
                                    <td>
                                        <div> @(comic.ChapterRead.HasValue ? comic.ChapterRead.ToString() :
                                      "?")/@(comic.TotalChapter.HasValue ? comic.TotalChapter.ToString() : "?")</div>
                                    </td>
                                }
                                @if (_tableSetting.PublishingStatus)
                                {
                                    <td>@comic.PublishingStatus</td>
                                }
                                <td>
                                    <Button @onclick="() => Edit(comic.Id)" TooltipTitle="Edit">
                                        <Icon Name="IconName.Pencil"></Icon>
                                    </Button>
                                </td>
                            </tr>
                        </Virtualize>
                    }
                </tbody>
            }
        </table>
    </div>
</div>

<Modal @ref="randomizedModal" CloseOnEscape="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <div class="d-flex flex-column gap-3">
            <h3>@_randomizedComic.Title
            </h3>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.Title)"></DisplayLabel>:
                <div>@_randomizedComic.Title</div>
            </div>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.ComicType)"></DisplayLabel>:
                <div>@(!string.IsNullOrEmpty(_randomizedComic.ComicType) ? _randomizedComic.ComicType : "N/A")</div>
            </div>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.PublishingStatus)"></DisplayLabel>:
                <div>@(!string.IsNullOrEmpty(_randomizedComic.PublishingStatus) ? _randomizedComic.PublishingStatus :
                       "N/A")</div>
            </div>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.ReadStatus)"></DisplayLabel>:
                <div>@(!string.IsNullOrEmpty(_randomizedComic.ReadStatus) ? _randomizedComic.ReadStatus : "N/A")</div>
            </div>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.ChapterRead)"></DisplayLabel>:
                <div>@(_randomizedComic.ChapterRead.HasValue ? _randomizedComic.ChapterRead.ToString() : "N/A")</div>
            </div>
            <div>
                <DisplayLabel For="@(() => _randomizedComic.TotalChapter)"></DisplayLabel>:
                <div>@(_randomizedComic.TotalChapter.HasValue ? _randomizedComic.TotalChapter.ToString() : "N/A")</div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button TooltipTitle="Edit" @onclick="() => Edit(_randomizedComic.Id)">
            <Icon Name="IconName.Pencil"></Icon>
        </Button>
        <Button TooltipTitle="Pick Another" @onclick="PickRandom">
            <Icon Name="IconName.Shuffle"></Icon>
        </Button>
        <Button Color="ButtonColor.Secondary" @onclick="CloseModal">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="columnSettingModal" CloseOnEscape="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <EditForm id="columnSettingForm" Model="@_newValue" FormName="columnSetting" OnValidSubmit="ApplySetting">
            <h3>Display Columns:</h3>
            <DataAnnotationsValidator />
            <div class="vstack gap-3">
                <SwitchInput For="()=>_newValue.ReadStatus" @bind-Value="@_newValue.ReadStatus">
                </SwitchInput>
                <SwitchInput For="()=>_newValue.Type" @bind-Value="@_newValue.Type"></SwitchInput>
                <SwitchInput For="()=>_newValue.PublishingStatus" @bind-Value="@_newValue.PublishingStatus">
                </SwitchInput>
                <SwitchInput For="()=>_newValue.Read" @bind-Value="@_newValue.Read">
                </SwitchInput>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" form="columnSettingForm">Filter</Button>
        <Button Color="ButtonColor.Secondary" @onclick="ResetSetting">Reset</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="filterSettingModal" CloseOnEscape="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <h3>Filter Setting:</h3>
        <div class="vstack gap-3" @ref="_filterSettingDiv">
            <div class="form-group">
                <label for="Title">Title</label>
                <InputText id="Title" autocomplete="off" @bind-Value="_search.Title" class="form-control" />
            </div>
            <ComicTypeDropdown @bind-Value="_search.ComicType" />
            <PublishingStatusDropdown @bind-Value="_search.PublishingStatus" />
            <ReadStatusDropdown @bind-Value="_search.ReadStatus" />
            <div class="hstack gap-3">
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="FilterTable">Filter</Button>
        <Button Color="ButtonColor.Secondary" @onclick="ClearFilterForm">Clear</Button>
    </FooterTemplate>
</Modal>


@code {
    private ElementReference _filterSettingDiv = default!;
    private Modal randomizedModal = default!;
    private Modal columnSettingModal = default!;
    private Modal filterSettingModal = default!;

    private List<Comic> _comics = [];

    private TableSetting _tableSetting = new();
    private TableSetting _newValue = new();

    private List<Comic> data = [];

    private Comic _search = new();

    private bool _isDataLoaded = false;

    private Comic _randomizedComic = new();

    private class TableSetting
    {
        [Display(Name = "Read status")] public bool ReadStatus { get; set; }
        [Display(Name = "Type")] public bool Type { get; set; }
        [Display(Name = "Publishing status")] public bool PublishingStatus { get; set; }
        [Display(Name = "Chapter Read")] public bool Read { get; set; }
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/comic/add");
    }

    private void Edit(string id)
    {
        NavigationManager.NavigateTo($"/comic/edit/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterTable();
    }

    private async Task ApplySetting()
    {
        _tableSetting = new TableSetting
            {
                ReadStatus = _newValue.ReadStatus,
                Type = _newValue.Type,
                PublishingStatus = _newValue.PublishingStatus,
                Read = _newValue.Read
            };
        StateHasChanged();
        await columnSettingModal.HideAsync();
    }

    private async Task ResetSetting()
    {
        _newValue.ReadStatus = false;
        _newValue.PublishingStatus = false;
        _newValue.Read = false;
        _newValue.Type = false;
        await ApplySetting();
    }

    private async Task ToggleContentAsync()
    {
        _newValue = new TableSetting
            {
                ReadStatus = _tableSetting.ReadStatus,
                Type = _tableSetting.Type,
                PublishingStatus = _tableSetting.PublishingStatus,
                Read = _tableSetting.Read
            };
        await columnSettingModal.ShowAsync();
    }

    private async Task ToggleFilterAsync()
    {
        await filterSettingModal.ShowAsync();
    }

    private async Task FilterTable()
    {
        _isDataLoaded = false;
        StateHasChanged();
        PreloadService.Show();
        data = await ComicService.GetComicList(_search);
        _isDataLoaded = true;
        StateHasChanged();
        PreloadService.Hide();
        await filterSettingModal.HideAsync();
    }

    private async Task ClearFilterForm()
    {
        _search = new Comic();
        await FilterTable();
        await ToggleFilterAsync();
    }

    private void PickRandom()
    {
        randomizedModal?.ShowAsync();
        var random = new Random();
        var index = random.Next(0, data.Count);
        _randomizedComic = data[index];
    }

    private void CloseModal()
    {
        randomizedModal?.HideAsync();
    }
}
