@page "/login"
@using TrackerWasm.AuthProvider
@using TrackerWasm.Components.SharedComponents
@using TrackerWasm.Services
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject UserService UserService
@inject ToastService ToastService
@inject CustomAuthStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<Card Style="max-width:30rem;" Class="mx-auto">
    <CardBody>
        <EditForm Model="@_user" OnValidSubmit="HandleValidSubmit" FormName="user-registration">
            <DataAnnotationsValidator/>
            <div class="vstack gap-3">
                <h1>Tracker</h1>
                <div class="form-group">
                    <DisplayLabel For="@(() => _user.Username)"/>
                    <InputText id="Username" autocomplete="off" @bind-Value="_user.Username" class="form-control"/>
                    <ValidationMessage For="@(() => _user.Username)"/>
                </div>

                <div class="form-group">
                    <DisplayLabel For="@(() => _user.Password)"/>
                    <InputText type="password" id="Password" autocomplete="off" @bind-Value="_user.Password"
                               class="form-control"/>
                    <ValidationMessage For="@(() => _user.Password)"/>
                </div>

                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Login</Button>
                <Button Color="ButtonColor.Link" @onclick="Register">Register</Button>

            </div>

        </EditForm>
    </CardBody>
</Card>

@code {
    private readonly ViewModels.Login _user = new();

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("comic/home");
        }
    }

    private async Task HandleValidSubmit()
    {
        PreloadService.Show(loadingText: "Logging in...");
        var result = await UserService.AuthenticateUser(_user);
        if (result)
        {
            await AuthenticationStateProvider.MarkUserAsAuthenticated();
            PreloadService.Hide();
            ToastService.Notify(new ToastMessage(ToastType.Success,
                $"Welcome back {await UserService.GetDiplayName()}"));
            // NavigationManager.NavigateTo("comic/home");
            NavigationManager.NavigateTo("forcerefresh", true);
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Warning,
                "Invalid credentials"));
            PreloadService.Hide();
        }
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/user/register");
    }

}