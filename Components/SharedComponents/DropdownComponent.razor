<div class="form-group">
    <label>@Label</label>
    @if (IsLoading)
    {
        <div>
            <Spinner Type="SpinnerType.Dots"/>
        </div>
    }
    else
    {
        <InputSelect @bind-Value:get="Value" @bind-Value:set="OnValueChanged" class="form-select">
            <option value="">@EmptySelectionText</option>
            @foreach (var type in Data)
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    }
</div>


@code {

    /// <summary>
    /// Selected value
    /// </summary>
    [Parameter]
    public string? Value { get; set; } = "";

    /// <summary>
    /// Selection has changed
    /// </summary>
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// Display spinner icon and hide Dropdown
    /// </summary>
    [Parameter]
    public bool IsLoading { get; set; } = false;

    /// <summary>
    /// Data for the Dropdown
    /// </summary>
    [Parameter]
    public List<string> Data { get; set; } = [];

    /// <summary>
    /// Label for the dropdown.
    /// This will also be used as default empty selection text.
    /// </summary>
    [Parameter]
    public required string Label { get; set; }

    /// <summary>
    /// Setting a value will override the default empty selection text.
    /// </summary>
    [Parameter]
    public string EmptySelectionText { get; set; } = "-";

    protected override void OnInitialized()
    {
        EmptySelectionText = $"-- Select {Label} --";
    }

    private async Task OnValueChanged(string? e)
    {
        await ValueChanged.InvokeAsync(e);
    }

}